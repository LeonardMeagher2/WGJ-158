[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;
render_mode cull_disabled;

uniform sampler2D front:hint_white;
uniform sampler2D back:hint_white;

vec3 srgb(vec3 rgb){
	return mix(pow((rgb + vec3(0.055)) * (1.0 / (1.0 + 0.055)),vec3(2.4)),rgb.rgb * (1.0 / 12.92),lessThan(rgb.rgb,vec3(0.04045)));
}

bool alpha_dither(float x, float y, float alpha){
	int _x = int(x) % 4;
	int _y = int(y) % 4;
	int index = _x + _y * 4;
	float limit = 0.0;

	if (_x < 8) {
		if (index == 0) limit = 0.0625;
		if (index == 1) limit = 0.5625;
		if (index == 2) limit = 0.1875;
		if (index == 3) limit = 0.6875;
		if (index == 4) limit = 0.8125;
		if (index == 5) limit = 0.3125;
		if (index == 6) limit = 0.9375;
		if (index == 7) limit = 0.4375;
		if (index == 8) limit = 0.25;
		if (index == 9) limit = 0.75;
		if (index == 10) limit = 0.125;
		if (index == 11) limit = 0.625;
		if (index == 12) limit = 1.0;
		if (index == 13) limit = 0.5;
		if (index == 14) limit = 0.875;
		if (index == 15) limit = 0.375;
	}
	return alpha < limit;
}

void fragment(){
	vec4 front_color = texture(front, UV);
	vec4 back_color = texture(back, UV);
	
	vec4 color = mix(back_color, front_color, float(FRONT_FACING));
	ALBEDO = srgb(color.rgb);
	if (alpha_dither(FRAGCOORD.x, FRAGCOORD.y, color.a)){
		discard;
	}
}"
